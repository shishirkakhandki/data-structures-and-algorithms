// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
   bool bfs(int V, vector<int>adj[], int st, vector<int>& visited, vector<int>&color){
       
       queue<long long int> q;
	    q.push(st);
	    
	    visited[st] = 1;
	
	  
	    color[st] = 1;
	    
	    while(q.size()>0){
	        
	        long long int t = q.front();
	        q.pop();
	       
	        
	        for(auto it: adj[t]){
	            
	            if(!visited[it] and color[it]==0){
	                
	                visited[it] = 1;
	                color[it] = -1*color[t];
	                q.push(it);
	                
	            }else {
	                
	                if(color[it]!=0 and color[t]==color[it])
	                   return false;
	                
	            }
	            
	        }
	        
	    }
	    
	    return true;
       
       
   }
    

	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    
	   
	   vector<int> visited(V, 0);
	   vector<int> color(V, 0);
	   
	   for(int i = 0; i<V; i++){
	       
	       if(!visited[i]){
	           
	           if(!bfs(V, adj, i, visited, color)){
	               return false;
	           }
	       }
	       
	   }
	   
	   return true;
	    
	}

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}  // } Driver Code Ends
